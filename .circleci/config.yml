version: 2.1

parameters:
  # Add parameter here 
  workflow-id:
    type: string
    default: ${CIRCLE_WORKFLOW_ID:0:7}
  memstash-token:
    type: string
    default: "CcbnMs23JZkzFEthwRcGRn" 

commands:
  install_ansible:
    description: Install Ansible
    steps:
    - run:
        name: Install Ansible  
        command: |
          sudo apt update
          sudo apt install software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible

  node_install:
    description: install Node.js 13
    steps:
    - run:
        name: Install Node.js 13
        command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - &&\
            sudo apt-get install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0

  awscli_install:
    description: Install AWS CLI v2 
    steps:
      - run:
          name: Install AWS CLI v2  
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.    
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >> 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here    
      #workflow_id:
      #  type: string
      #event:
      #  type: string      
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    environment:
      CODE: 123
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            # echo $CODE
            npm install
            npm run build
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build             
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["frontend-build"]
      # Your job code here
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install oauth-sign
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["backend-build"]
      # Your job code here
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install oauth-sign
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan fronend dependencies
          command: |
            cd frontend
            npm install
            #npm audit --audit-level=critical || true
            npm audit fix --audit-level=critical --force    
      
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            #npm audit --audit-level=critical || true
            npm audit fix --audit-level=critical
            
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - awscli_install

      # - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # cd .circleci/ansible
            # aws ec2 describe-instances \
            #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --output text >> inventory.txt
            # cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - persist_to_workspace:
      #     root: ./
      #     paths:
      #       - .circleci/ansible/inventory.txt


      # Here's where you will add some code to rollback on failure      
      - destroy_environment       


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - awscli_install
      - install_ansible
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["79:48:1d:60:a7:48:6c:00:90:77:1c:93:b6:72:e0:ce"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Run Configure Server Ansible play
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy_environment

  run-migrations:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend] 
      - run:
          name: "Install Dependencies"
          working_directory: /tmp
          command: |
            sudo apt-get -y update
            sudo apt-get -y install python3
            sudo apt-get -y install awscli
     
      - run:
          name: Run migrations
          command: |
            cd backend
            npm cache clean --force
            npm install
            touch migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
            npm run migrations >> migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
            cat migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
            
      - run:
          name: Send migration results to memstash
          command: |
            cd backend        
              if grep  "success" migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
            then
              echo "DB migration was successful, will update kvdb..."
              curl --insecure https://kvdb.io/CcbnMs23JZkzFEthwRcGRn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "DB migration failed"
              curl --insecure https://kvdb.io/CcbnMs23JZkzFEthwRcGRn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: LogOnFail
          when: on_fail
          command: |
            cat /home/circleci/.npm/_logs/*-debug.log
            ls -la
            cat backend/migration.txt    
                  
      - revert-migrations
      - destroy_environment
          
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - awscli_install
      - node_install
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      - destroy_environment
      - revert-migrations
      
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - awscli_install
      - install_ansible
      - node_install
      - add_ssh_keys:
          fingerprints: ["79:48:1d:60:a7:48:6c:00:90:77:1c:93:b6:72:e0:ce"]     
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [build-backend] 
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd backend
            npm install
            # apk add --update tar gzip curl
            # apk add --update openssh-client
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*


            cd ..
            # pwd
            # ls -lah 
            # tar -czvf backend.tar.gz backend
            # cd .circleci/ansible
            # echo "Contents  of the inventory.txt file is -------"
            # cat inventory.txt
            # ansible-playbook -i inventory.txt deploy-backend.yml 
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files   

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
      - revert-migrations      
      - destroy_environment
          
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/base:stable      
    steps:
      # Checkout code from git
      - checkout
      - awscli_install
      - node_install

      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      #       apk add --update curl            
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      #       export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo "${API_URL}""
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi            
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=https://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.${AWS_DEFAULT_REGION}.amazonaws.com
            # URL="http://<< pipeline.parameters.workflow-id >>.s3-website-us-east-1.amazonaws.com"
            # echo $URL
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy_environment
      - revert-migrations  
  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - awscli_install
      - node_install
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/CcbnMs23JZkzFEthwRcGRn/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack

      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy_environment
          
  cleanup:
    docker:
      # Docker image here
      - image: cimg/base:stable
    steps:
      # Checkout code from git 1
      - checkout
      - awscli_install
      - node_install
      # - run:
      #     name: Get old stack workflow id
      #     command: |
      #       export OLD_WORKFLOW_ID=$(aws cloudformation \
      #                 list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
      #                 --no-paginate --output text)
      #       echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
      #       curl https://kvdb.io/CcbnMs23JZkzFEthwRcGRn/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names:"${STACKS[@]}"

            export OldWorkflowID=$(curl --insecure https://kvdb.io/CcbnMs23JZkzFEthwRcGRn/old_workflow_id)
            echo Old workflow ID: $OldWorkflowID

            if [[  "${STACKS[@]}" =~ "${OldWorkflowID}"  ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
          #   if [ ! -z $OldWorkflowID ]
          #   then
          #     echo "I'm HERE !!!" udapeople-frontend-
          #     aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
          #     aws s3 rb s3://udapeople-${OldWorkflowID} --force
          #     aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
          #     aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
          #     echo "Stacks deleted succesfully"
          #   else
          #     echo "Fresh New Stacks"
          #   fi
          # no_output_timeout: 30m  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]